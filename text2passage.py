import spacy
import argparse
import re
import os
import string
import csv

sent_punt = [".", "...", "!", "?"]
special_token = "askubuntu"
punctuation = string.punctuation


def segment(line):
    #ubutnu data format:

    sents = []
    sent = []
    for line_split in line.split('    '):
        for token in line_split.strip().split():
            if re.search(special_token, token) or len(token.strip()) < 1:
                continue
            sent.append(token.strip())
            if token in sent_punt:
                if len(sent) > 1:
                    sents.append(" ".join(w for w in sent))
                    sent = []
    return sents


def read_file(src):
    all_sents = []
    with open(src) as src_file:
        reader = csv.DictReader(src_file, dialect='excel-tab')
        for line in reader:
            title = segment(line["title"])
            post = segment(line["post"])
            all_sents += title
            all_sents += post
    return all_sents


def preprocess(sents, output):
    nlp = spacy.load("en_core_web_sm")
    passage_id = 10000
    output_text = open(os.path.join(output, "ori_text.txt"), "w")

    for sent in sents:
        passage_id += 1
        if passage_id > 11000:
            break
        output_xml = open(os.path.join(output, str(passage_id) + ".xml"), "w")
        output_text.write(sent + "\n")
        doc = nlp(sent)
        node_id = 1
        output_xml.write('<root annotationID="0" passageID="%s">\n' % str(passage_id))
        output_xml.write('  <attributes />\n')
        output_xml.write('  <layer layerID="0">\n')
        output_xml.write('    <attributes />\n')
        output_xml.write("""    <extra doc="[[[5059648917813135842, 7425985699627899538, 15267657372422890137, '
                         '89, 0, 2, 412, 1, 18200729499220207786, 5582244037879929967, 5059648917813135842], '
                         '[2611489286707657924, 2611489286707657924, 10554686591937588953, 83, 0, 2, 426, 2, '
                         '13110060611322374290, 646772771845179972, 3477492905443839178], [2630753287402592467, '
                         '2630753287402592467, 164681854541413346, 85, 0, 2, 397, 1, 13110060611322374290, '
                         '15369245168918225700, 17541118948136595177], [16652887580046169232, 6170043792778714125, '
                         '17109001835818727656, 99, 0, 2, 445, 0, 13110060611322374290, 16562859848569467201, '
                         '11208870015262361521], [11901859001352538922, 11901859001352538922, 15267657372422890137, '
                         '89, 0, 2, 412, 1, 11123243248953317070, 11901859001352538922, 11901859001352538922], '
                         '[1827453542365867094, 1827453542365867094, 15308085513773655218, 91, 0, 2, 431, -2, '
                         '13110060611322374290, 13110760720460257827, 15821625864535617351], [3125235652374451650, '
                         '14229572451745258962, 3822385049556375858, 99, 0, 2, 447, -1, 13110060611322374290, '
                         '16900879642891266615, 5121906190925376702], [9227282477972130368, 9227282477972130368,'
                         ' 15794550382381185553, 95, 384, 3, 446, -1, 16072095006890171862, 3209455878668673793, '
                         '1803668754074815120], [2593208677638477497, 2593208677638477497, 2593208677638477497, '
                         '96, 0, 2, 442, -5, 2593208677638477497, 2593208677638477497, 2593208677638477497], '
                         '[7063653163634019529, 7063653163634019529, 17202369883303991778, 94, 0, 2, 426, 1, '
                         '13110060611322374290, 260667111241363922, 5864527961345014045], [409477882733783224,'
                         ' 409477882733783224, 17109001835818727656, 99, 0, 2, 6025759613719693942, -7, '
                         '13110060611322374290, 13110760720460257827, 17551718516836219974], [13874798850131827181,'
                         ' 13874798850131827181, 10554686591937588953, 83, 0, 2, 399, 1, 13110060611322374290,'
                         ' 2985121464356781022, 18368739048743112828], [14046186974944512849, 14046186974944512849, '
                         '15308085513773655218, 91, 0, 2, 431, -2, 13110060611322374290, 13110760720460257827, '
                         '10400321950887182855], [2283656566040971221, 2283656566040971221, 17571114184892886314, 88,'
                         ' 0, 2, 404, 2, 4088098365541558500, 11901859001352538922, 2283656566040971221], '
                         '[3563698965725164461, 3563698965725164461, 10554686591937588953, 83, 0, 2, 399,'
                         ' 1, 13110060611322374290, 16978132545290669629, 2308372342712821294], [5665575797947403677, '
                         '1827453542365867094, 783433942507015291, 91, 0, 2, 407, -3, 13110060611322374290, '
                         '13110760720460257827, 16647756727542191077], [4380130941430378203, 4380130941430378203, '
                         '17202369883303991778, 94, 0, 2, 426, 1, 13110060611322374290, 15369245168918225700,'
                         ' 14949295185858420483], [16212084179350151245, 230120506323693159, 17109001835818727656, '
                         '99, 0, 2, 6025759613719693942, -5, 13110060611322374290, 16978132545290669629, '
                         '17551718516836219974], [17101725512904321536, 17101725512904321536, 15794550382381185553, '
                         '95, 378, 3, 431, -1, 16072095006890171862, 18003918085672799305, 2555790282192608669], '
                         '[2283656566040971221, 2283656566040971221, 17571114184892886314, 88, 0, 2, 404, 1, '
                         '4088098365541558500, 11901859001352538922, 2283656566040971221], [10943246026551806948,'
                         ' 10943246026551806948, 15794550382381185553, 95, 378, 3, 407, -2, 18200729499220207786,'
                         ' 18003918085672799305, 10943246026551806948], [7741697790607430034, 7741697790607430034,'
                         ' 15794550382381185553, 95, 378, 1, 2666271516716718244, -1, 16072095006890171862, '
                         '17714545831559622561, 11934410412371370754], [12646065887601541794, 12646065887601541794, '
                         '12646065887601541794, 96, 0, 2, 442, -19, 12646065887601541794, 12646065887601541794,'
                         ' 12646065887601541794]], [], []]" />\n""")

        for token in doc:
            text = token.text
            pos = token.pos_
            tag = token.tag_
            ent_type = token.ent_type_
            shape = token.shape_
            lemma = token.lemma_
            dep = token.dep_
            type="Punctuation" if text in punctuation else "Word"
            output_xml.write('    <node ID="0.%d" type="%s">\n' % (node_id, type))
            output_xml.write('      <attributes paragraph="1" paragraph_position="%d" text="%s" />\n' % (node_id, text))
            output_xml.write('<extra dep="%s" ent_iob="2" ent_type="%s" head="1" lemma="%s" orig_paragraph="2" orth="a"'
                             ' pos="%s" prefix="a" shape="%s" suffix="a" tag="%s" />\n' % (dep, ent_type, lemma,
                                                                                           pos, shape, tag))
            output_xml.write('    </node>\n')
            node_id += 1
        output_xml.write('  </layer>\n')
        output_xml.write('</root>\n')


def main():
    parser = argparse.ArgumentParser(description='preprocess data')
    parser.add_argument('-input', type=str,
                        help='path to input text')
    parser.add_argument('-output', type=str,
                        help='path to output')
    opts = parser.parse_args()

    src = opts.input
    output = opts.output

    sents = read_file(src)
    preprocess(sents, output)


if __name__ == "__main__":
    main()



